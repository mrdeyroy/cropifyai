// The code was autogenerated by Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for transcribing voice input into text for farm data input.
 *
 * @fileOverview This file defines a Genkit flow for transcribing voice input into text, enabling farmers to use voice for inputting farm data.
 * - transcribeVoiceInput - A function that transcribes voice input to text.
 * - TranscribeVoiceInputInput - The input type for the transcribeVoiceInput function.
 * - TranscribeVoiceInputOutput - The output type for the transcribeVoiceInput function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const TranscribeVoiceInputInputSchema = z.object({
  audioDataUri: z
    .string()
    .describe(
      "The audio data URI containing the voice input. It must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  languageCode: z
    .string()
    .optional()
    .describe(
      'The language code of the voice input. Defaults to the user\'s selected language.'
    ),
});
export type TranscribeVoiceInputInput = z.infer<typeof TranscribeVoiceInputInputSchema>;

const TranscribeVoiceInputOutputSchema = z.object({
  transcription: z.string().describe('The transcribed text from the voice input.'),
});
export type TranscribeVoiceInputOutput = z.infer<typeof TranscribeVoiceInputOutputSchema>;

export async function transcribeVoiceInput(input: TranscribeVoiceInputInput): Promise<TranscribeVoiceInputOutput> {
  return transcribeVoiceInputFlow(input);
}

const transcribeVoiceInputPrompt = ai.definePrompt({
  name: 'transcribeVoiceInputPrompt',
  input: { schema: TranscribeVoiceInputInputSchema },
  output: { schema: TranscribeVoiceInputOutputSchema },
  prompt: `Transcribe the following audio into text.  Use the language code {{{languageCode}}} if provided, otherwise, detect the language automatically.\n\nAudio: {{media url=audioDataUri}}`,
});

const transcribeVoiceInputFlow = ai.defineFlow(
  {
    name: 'transcribeVoiceInputFlow',
    inputSchema: TranscribeVoiceInputInputSchema,
    outputSchema: TranscribeVoiceInputOutputSchema,
  },
  async input => {
    const { output } = await transcribeVoiceInputPrompt(input);
    return output!;
  }
);
